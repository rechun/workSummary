面向对象编程就是将你的需求抽象成一个对象,让针对这些对象分析其特征(属性)与动作

这个对象我们称之为类。

面向对象思想其中有一个特点就是封装。把需要的功能放在一个对象里。

对于js这种解释性的弱类型语言，没有经典强类型语言中的class关键字实现类的封装。

js中是通过特性模仿实现的,这带来了极高的灵活性。

================================2.2 封装=====================================

创建一个类
  在函数内部通过对this变量添加属性或者方法来实现对类添加属性或方法
var Book = function(id,bookname,price){
  this.id = id;
  this.bookname = bookname;
  this.price = price;
  
}
  通过在类的原型上添加属性和方法
  
  1.为原型对象属性赋值
  
  Book.prototype.display = function(){
      //展示这本书
  }
  
  2.将对象赋值给类的原型对象
  Book.prototype = {
    display:function(){
      //  展示这本书
    }
  }
  
  我们将所需要的方法和属性都封装在我们抽象的Book类
  
  使用的时候需要用new 关键字来实例化创建新的对象
  
  var book = new Book(10,'javascript设计模式',50);
  
  
  
  
  通过this添加的属性、方法是在当前对象上添加的。
  js是一种基于原型prototype的语言
  每创建一个对象时候，他都有一个原型prototype用于指向其基础的属性、方法。
  
  通过prototype继承的方法并不是对象自身的。
  在使用这些方法时，需要通过prototype一级一级查找来得到。
  
  
  通过this定义的属性或方法是该对象自身拥有的。
  
  constructor
  
  constructor是一个属性，当创建一个函数或者对象时，都会为其创建一个原型对象。
  
  在prototype对象中，又会像函数中创建this一样创建一个constructor属性。
  
  constructor属性指向的就是拥有整个原型对象的函数或对象。
 
  
  ——-------------------------------2.2.2属性与方法封装——----------------------------
  //私有属性与私有方法，特权方法，对象共有属性和对象共有方法
  //构造器
  var Book = function(id,name,price){
    var num = 1;//私有属性
    function checkId(){//私有方法
    
    };
    this.getName = function(){//特权方法
    
    };
    this.getPrice = function(){//特权方法
    
    };
    this.setName = function(){//特权方法
    
    };
    this.setPrice = function(){//特权方法
    
    };
    this.id = id;//对象共有属性
    this.copy = function(){//对象公有方法
    
    };
    this.setName(name);//构造器
    this.setPrice(price);//构造器
 }
 
 @@@通过js的函数级作用域来实现在函数内创建外界访问不到的私有变量，私有方法；
 
 @@@通过new关键字实例化对象；在类内部this上定义的属性和方法复制到新的对象（作为对象的公有方法）
 
 @@@prototype对象中的属性和方法成为公有属性 和方法；
 
 Book.isChinese = true;//类静态公有属性（对象不能访问）
 Book.resetTime = function(){//类静态公有方法（对象不能访问）
  //  重新设置时间
 }
 Book.prototype = {
    isJSBook:false,//公有属性
    display:function(){//公有方法
    
    }
 }
  
  
  ——-------------------------------2.2.3 闭包实现——----------------------------
  
var Book = （function(){
  var bookNum = 0;//静态私有变量
  function checkBook(name){//静态私有方法
  
  }
  function book(newId,newName,newPrice){//创建类
    var name,price;//私有变量
    function checkID(id){ //私有方法
    }
    this.getName = function(){};//特权方法
    this.getPrice = function(){};//特权方法
    this.setName = function(){};//特权方法
    this.setPrice = function(){};//特权方法
    this.id = newId;//公有属性
    this.copy = function(){}//公有方法
    bookNum++;
    if(bookNum >100) throw new Error（'我们仅出版100本书'）
    this.setName(name);//构造器
    this.setPrice(price);//构造器
  }
  _book.prototype = {//创建原型
    isJSBook :false;//静态公有属性
    display:function(){}//静态公有方法
  }
  return _book;//返回类
}()）;


@@@闭包是有权限访问另外一个函数作用域中变量的函数 


 ——-------------------------------2.2.4 创建对象的安全模式——----------------------------
 
 new关键字是作用可以看作是对当前对象的this不停赋值。
 
 var Book = function (title,time,type){
    if(this.instanceof Book){
        this.title = title;
        this.time = time;
        this.type = type;
    }else{
    return new Book(title,time,type)
  }
 }
 var book = Book('javascripe','2014','js');
 
 
 
  
